var mysql1 = require('./test');
var Web3 = require('web3');
var checkUtils = require('./checkUtils');

const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:1111'));
var adminAccount = "0xa2b493693bc3c888d963234fcee0f83071cd3a0a";
var adminPassword = "123123";
var contractAddress = "0x1cf95d9eceaa6c154f3c390b7037e31e6f13e288";
var jsonInterface = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "t_id",
				"type": "uint256"
			},
			{
				"name": "typeValues",
				"type": "string"
			}
		],
		"name": "updateType",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "t_id",
				"type": "uint256"
			}
		],
		"name": "getType_ids",
		"outputs": [
			{
				"name": "",
				"type": "string[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "t_id",
				"type": "uint256"
			},
			{
				"name": "typeValues",
				"type": "string"
			}
		],
		"name": "checkTypeValuse",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "t_id",
				"type": "uint256"
			}
		],
		"name": "delType",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "string"
			}
		],
		"name": "getNote",
		"outputs": [
			{
				"components": [
					{
						"name": "id",
						"type": "string"
					},
					{
						"name": "date",
						"type": "string"
					},
					{
						"name": "title",
						"type": "string"
					},
					{
						"name": "desc",
						"type": "string"
					},
					{
						"name": "content",
						"type": "string"
					},
					{
						"name": "t_id",
						"type": "uint256"
					},
					{
						"name": "username",
						"type": "string"
					}
				],
				"name": "",
				"type": "tuple"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "t_id",
				"type": "uint256"
			}
		],
		"name": "getType",
		"outputs": [
			{
				"name": "",
				"type": "string"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "username",
				"type": "string"
			}
		],
		"name": "getUser_id",
		"outputs": [
			{
				"name": "",
				"type": "string[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "username",
				"type": "string"
			},
			{
				"name": "date",
				"type": "string"
			},
			{
				"name": "id",
				"type": "string"
			},
			{
				"name": "title",
				"type": "string"
			},
			{
				"name": "desc",
				"type": "string"
			},
			{
				"name": "content",
				"type": "string"
			},
			{
				"name": "t_id",
				"type": "uint256"
			}
		],
		"name": "addNote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "id",
				"type": "string"
			},
			{
				"name": "username",
				"type": "string"
			}
		],
		"name": "delNote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "typeValues",
				"type": "string"
			}
		],
		"name": "addType",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "username",
				"type": "string"
			},
			{
				"name": "date",
				"type": "string"
			},
			{
				"name": "id",
				"type": "string"
			},
			{
				"name": "title",
				"type": "string"
			},
			{
				"name": "desc",
				"type": "string"
			},
			{
				"name": "content",
				"type": "string"
			},
			{
				"name": "t_id",
				"type": "uint256"
			}
		],
		"name": "updateNote",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	}
];
// [{"constant":false,"inputs":[{"name":"date","type":"string"},{"name":"id","type":"string"},{"name":"title","type":"string"},{"name":"desc","type":"string"},{"name":"content","type":"string"}],"name":"addNote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"date","type":"string"},{"name":"count","type":"uint256"}],"name":"getNoteList","outputs":[{"components":[{"name":"tile","type":"string"},{"name":"desc","type":"string"},{"name":"content","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"date","type":"string"},{"name":"id","type":"string"}],"name":"getNote","outputs":[{"components":[{"name":"tile","type":"string"},{"name":"desc","type":"string"},{"name":"content","type":"string"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}];
var bytecode = '';
var bn = new web3.eth.Contract(jsonInterface);
//测试
function test(body) {
	var username = body.userName;
	console.log(username);
	return 'result';
}
//创建账户
async function newAccount(password) {
	var account = "account";
	console.log(password);
	await web3.eth.personal.newAccount(password, function (error, data) {
		console.log("创建的新账户地址：" + data)
		account = data;
	});
	sendToAccount(account, '10');
	return account;
}

//转账给用户
async function sendToAccount(account, amount) {
	var result = await unlockAccount(adminAccount,adminPassword);
	if(!result){return {'result':'账户解锁失败'}}
	web3.eth.sendTransaction({
		from: adminAccount,
		to: account,
		value: web3.utils.toWei(amount)
	}, function (error, data) {
		console.log("交易的hash值：" + data);
	});
}

//解锁账户
async function unlockAccount(account, password) {
	var result = false;
	await web3.eth.personal.unlockAccount(account, password, 300, function (error, data) {
		console.log(account + "解锁结果：" + data);
		result = data;
	});
	return result;
}
//部署合约方法的转发，因为没有返回值，server.js中会报错
async function deploy(account,password) {
	// var account = body.account;
	// var password = body.password;
	var result = await unlockAccount(account,password);
	
	if (result) {//解锁当前用户的以太坊账户
		var address = await deployContract(account);
	}

	return {'contractAddress':address};
}
//部署合约  
function deployContract(account) {
	//部署合约
	return new Promise(function(resolve, reject) {
		bn.deploy({
			data: bytecode
		}).send({
				from: account,
				gas: 3000000,
				gasPrice: '300000000000'
			}, function (error, transactionHash) {
				console.log(error);
			})
			.on('receipt', function (receipt) {
				console.log('合约部署地址：' + receipt.contractAddress) // 收据中包含了新的合约地址
				resolve(receipt.contractAddress);
			});
	});
}
//创建用户对象
function user(userName,name,password,addr,account)
{
    this.userName = userName;
    this.name = name;
    this.password = password;
    this.addr = addr;
	this.account = account;
}
//创建文章对象
function essay(userName,title,desc,content,t_id)
{
    this.userName = userName;
    this.title = title;
    this.desc = desc;
    this.content = content;
	this.t_id = t_id;
}
//创建笔记对象
function titles(id,date,title,desc,content)
{
    this.id = id;
    this.date = date;
    this.title = title;
    this.desc = desc;
	this.content = content;
}
function getBalance(account){
    return new Promise(function(resolve, reject) {
        web3.eth.getBalance(account,function (error, data) {
//             console.log(error);
            resolve(data);
        });
    });
}
//添加笔记
async function addNote(body,account,password){
	/*获取参数 begin*/
	var t_id = body.t_id;
	var userName = body.userName;
	var title = body.title;
	var desc = body.desc;
	var content = body.content;
	// var account = body.account;
	// var password = body.password;
	/*获取参数end*/
	//解锁
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	var date = checkUtils.getNowFormatDate();
	console.log("nodeDate:|"+date+"|");
	var id = web3.utils.sha3(new Date().getTime()+title+desc+content)+"";
	console.log("noteId:id:"+id);
	//add合约请求
	bn.options.address = contractAddress;
	var flag =  await bn.methods.addNote(userName,date,id,title,desc,content,t_id).send({
		from:account,
		gas: 3000000,
		gasPrice: '300000000000'
	},function(error,data){
		console.log("addNote method result:"+error);
		console.log("addNoteData method data:"+data);
		if (!error) {
			console.log('数据已提交')
			result = true;
		}
		else{
			console.log('数据提交失败')
			result = false;
		}
	});
	if(flag){
		
		return {"outcomeCode":1,"result":true};
	 }else{
		return {"outcomeCode":0,"result":false};
	 }
	sendToAccount(account,'10');
	return result;
}
//公开笔记的添加
async function addN(body){
	var userName = body.userName;
	var result = await mysql1.selectUser1(userName);
	if(typeof result[0] == "undefined"){
		return {'outcomeCode':-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var password = user1.password;
	var result;
	if((!checkUtils.isEmpty(body.title))&&(!checkUtils.isEmpty(body.desc))&&(!checkUtils.isEmpty(body.content))){
		result = await addNote(body,account,password);
		console.log(result);
	}else{
		return "有数据为空";
	}
	return result;
}
//添加类型
async function addType(value,account,password){
	/*获取参数 begin*/
	// var value = body.value;
	// var account = body.account;
	// var password = body.password;
	// var contractAddress = body.contractAddress;
	/*获取参数end*/
	//解锁
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	//add合约请求
	bn.options.address = contractAddress;
	await bn.methods.addType(value).send({
		from:account,
		gas: 3000000,
		gasPrice: '300000000000'
	},function(error,data){
		console.log("addType method result:"+error);
		console.log("addType method data:"+data);
		if (!error) {
			console.log('数据已提交')
			result = true;
		}
		else{
			console.log('数据提交失败')
			result = false;
		}
	});
	return result;
}
//增加话题
async function paddtype(value,account,password){
	// var value = body.value;
	// var account = body.account;
	// var password = body.password;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = contractAddress;
	if((!checkUtils.isEmpty(value))){
		result = await new Promise(function(resolve, reject){
			 bn.methods.checkTypeValuse(0,value).call(
			{
				from:account
			}
			, function(error,data){
			//data:调用方法之后的返回值
				console.log("checkTypeValuse method result:"+error);
				console.log("checkTypeValuse method result:"+data);
				if (!error) {
					console.log('已查询是否重复')
					resolve(data);
				}
				else{
					console.log('未查询到')
					resolve(false);
				}
			});
		});
		console.log(result);
		if(!result){
			var result1 = await addType(value,account,password);
		}else{
			console.log('话题重复');
		}
	}
	console.log('增加话题结束');
	return result1;
}
//获取t_id总数
async function pgetnotype(account,password){
	// var account = body.account;
	// var password = body.password;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = contractAddress;
	var data;
	data = await new Promise(function(resolve, reject){
			 bn.methods.getType(0).call(
			{
				from:account
			}
			, function(error,data){
			//data:调用方法之后的返回值
				console.log("checkTypeValuse method result:"+error);
				console.log("checkTypeValuse method result:"+data);
				if (!error) {
					resolve(data);
				}
				else{
					console.log(error)
					resolve(false);
				}
			});
		});
	return data[1];
}
//获取话题分页
async function pgettypevalues(account,password){
	// var account = body.account;
	// var password = body.password;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = contractAddress;
	var types = new Array();
	var data2;
	var data1 = await pgetnotype(account,password);
	console.log('一共有'+data1+'个话题');
	for(var i=1;i<=data1;i++){
		data2 = await new Promise(function(resolve, reject){
			 bn.methods.getType(i).call(
			{
				from:account
			}
			, function(error,data){
			//data:调用方法之后的返回值
				console.log("checkTypeValuse method result:"+error);
				console.log("checkTypeValuse method result:"+data);
				if (!error) {
					resolve(data);
				}
				else{
					console.log(error)
					resolve(false);
				}
			});
		});
		types[i-1] = data2[0];
	}
	return types;//type[0]='话题名'
}
//获取指定t_id的笔记id[]
async function pgettype_ids(body,account,password){
	// var account = body.account;
	// var password = body.password;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = contractAddress;
	var t_id = body.t_id;
	var data1 = await new Promise(function(resolve, reject){
			 bn.methods.getType_ids(t_id).call(
			{
				from:account
			}
			, function(error,data){
			//data:调用方法之后的返回值
				console.log("checkTypeValuse method result:"+error);
				console.log("checkTypeValuse method result:"+data);
				if (!error) {
					resolve(data);
				}
				else{
					console.log(error)
					resolve(false);
				}
			});
		});    
	return data1;
}
//分页(通过t_id获取该话题的笔记)
async function paging(body){
	var totalnum;//总记录数
	var totalpage;//总页数
	var page = body.page;
	var userName = body.userName;
	var noteList = [];
	var outcome;
	var t_id = body.t_id;
    if(checkUtils.isEmpty(page)||page==0){
        page = 1;
    }
	var result = await mysql1.selectUser1(body.userName);
	var outcomeCode = 1;
	if(typeof result[0] == "undefined"){
		return {"outcomeCode":-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var noteids = await pgettype_ids(body,account,result[0].password);
	
	
    // console.log('body的'+userName);
    totalnum = noteids.length;
    if(totalnum/3 > parseInt(totalnum/3)){
         totalpage=parseInt(totalnum/3)+1;
     }else{
         totalpage=parseInt(totalnum/3);
     }
    console.log('总页数'+totalpage);
    if(page>totalpage){
        page = totalpage;
    }
	

    //计算分页后的下标
    var max,min;
    if(totalnum==0){
        max = 0;
        min = 1;
    }else{
        max = totalnum-(page-1)*3-1;
        min = totalnum-(page*3);
        if(min<0){
            min = 0;
        }
    }
    //计算分页后的下标结束
    var account = account;
	bn.options.address = contractAddress;
    for(var index=max;index>=min;index--){
     await bn.methods.getNote(noteids[index]).call({
     from:account
     }, function(error,data){
     //data:调用方法之后的返回值
     console.log("第"+index+"个笔记信息");
     console.log("getNoteByIndex method result:"+error);
     console.log("getNoteByIndex method result:"+data);
     noteList.push(data);
     if (error) {
     console.log("返回笔记信息失败");
     }else{
     console.log("data");
     }
     });
    }
    
    outcome = {"noteList":noteList,"page":page,"totalpage":totalpage,"totalnum":totalnum};
    return outcome;
    // console.log(titless);
}
//获得笔记列表
async function getNoteList1(body){
	var date = body.date;
	var count = body.count;
	var account = body.account;
	var password = body.password;
	console.log("获取参数date:"+date);
	var contractAddress = body.contractAddress;
	bn.options.address = contractAddress;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	await bn.methods.getNoteList(date,count)
					.call(
					{
						from:account
					}
					, function(error,data){
						//data:调用方法之后的返回值
						console.log("getNoteList method result:"+error);
						console.log("getNoteListData method result:"+data);
						if (error) {
							result = {'result':'获取笔记列表失败'};
						}else{
							result = {'result':data};
						}
					});
	return result;
}

//获得笔记列表
async function getNoteList(body){
	var id = body.id;
	var account = body.account;
	var password = body.password;
	var contractAddress = body.contractAddress;
	bn.options.address = contractAddress;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	await bn.methods.getNote(id)
					.call(
					{
						from:account
					}
					, function(error,data){
						//data:调用方法之后的返回值
						console.log("getNote method result:"+error);
						console.log("getNote method result:"+data);
						if (error) {
							result = {'result':'获取笔记列表失败'};
						}else{
							result = {'result':data};
						}
					});
	return result;
}

//获得一个笔记
async function getNote(body){
	/*获取参数begin*/
	var date = body.date;
	var id = body.id;
	var account = body.account;
	var password = body.password;
	/*获取参数end*/
	var result =await unlockAccount(account,password);
	if(result){//解锁当前用户的以太坊账户
		bn.options.address = contractAddress;
		await bn.methods.getNote(date,id).call({
				from:account
			},function(error,data){
				if (error) {
					result = {'result':'获取笔记列表失败'};
				}else{
					result = {'result':data};
				}
				console.log("getNote mothod result："+error);
				console.log("getNote mothod data："+data);
			});
	}
	return result;
}


//获取当前时间，格式YYYY-MM-DD
function getNowFormatDate() {
	var date = new Date();
	var seperator1 = "-";
	var year = date.getFullYear();
	var month = date.getMonth() + 1;
	var strDate = date.getDate();
	if (month >= 1 && month <= 9) {
		month = "0" + month;
	}
	if (strDate >= 0 && strDate <= 9) {
		strDate = "0" + strDate;
	}
	var currentdate = year + seperator1 + month + seperator1 + strDate;
	return currentdate;
}

function testCooie(body){
	console.log(body);
	return {"result":true,"userName":"wuzhuhaoCookie","name":"wuzhuhao"};
}

exports.test = test;
exports.testCooie = testCooie;
exports.newAccount = newAccount;
exports.deploy = deploy;
exports.addNote = addNote;
exports.addN = addN;
exports.getNote = getNote;
exports.getNoteList = getNoteList;
exports.addType = addType;
exports.paddtype = paddtype;
exports.pgettypevalues = pgettypevalues;
exports.pgetnotype = pgetnotype;
exports.pgettype_ids = pgettype_ids;
exports.paging = paging;