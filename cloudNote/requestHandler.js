var mysql1      = require('./test');
var Web3 = require('web3');
var checkUtils = require('./checkUtils');
var publicNote = require('./requestHandler1');

const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:1111'));
var adminAccount = "0xa2b493693bc3c888d963234fcee0f83071cd3a0a";
var adminPassword = "123123";

var jsonInterface = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "date",
				"type": "string"
			},
			{
				"name": "id",
				"type": "string"
			},
			{
				"name": "title",
				"type": "string"
			},
			{
				"name": "desc",
				"type": "string"
			},
			{
				"name": "content",
				"type": "string"
			}
		],
		"name": "addNote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "t_id",
				"type": "uint256"
			}
		],
		"name": "addTypeList",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "id",
				"type": "string"
			}
		],
		"name": "delNote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "t_id",
				"type": "uint256"
			}
		],
		"name": "delTypeList",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "date",
				"type": "string"
			},
			{
				"name": "id",
				"type": "string"
			},
			{
				"name": "title",
				"type": "string"
			},
			{
				"name": "desc",
				"type": "string"
			},
			{
				"name": "content",
				"type": "string"
			}
		],
		"name": "updateNote",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getIdsList",
		"outputs": [
			{
				"name": "",
				"type": "string[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getLength",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "id",
				"type": "string"
			}
		],
		"name": "getNote",
		"outputs": [
			{
				"components": [
					{
						"name": "id",
						"type": "string"
					},
					{
						"name": "date",
						"type": "string"
					},
					{
						"name": "title",
						"type": "string"
					},
					{
						"name": "desc",
						"type": "string"
					},
					{
						"name": "content",
						"type": "string"
					}
				],
				"name": "",
				"type": "tuple"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getNoteByIndex",
		"outputs": [
			{
				"components": [
					{
						"name": "id",
						"type": "string"
					},
					{
						"name": "date",
						"type": "string"
					},
					{
						"name": "title",
						"type": "string"
					},
					{
						"name": "desc",
						"type": "string"
					},
					{
						"name": "content",
						"type": "string"
					}
				],
				"name": "",
				"type": "tuple"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getTypeList",
		"outputs": [
			{
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
];
// [{"constant":false,"inputs":[{"name":"date","type":"string"},{"name":"id","type":"string"},{"name":"title","type":"string"},{"name":"desc","type":"string"},{"name":"content","type":"string"}],"name":"addNote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"date","type":"string"},{"name":"count","type":"uint256"}],"name":"getNoteList","outputs":[{"components":[{"name":"tile","type":"string"},{"name":"desc","type":"string"},{"name":"content","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"date","type":"string"},{"name":"id","type":"string"}],"name":"getNote","outputs":[{"components":[{"name":"tile","type":"string"},{"name":"desc","type":"string"},{"name":"content","type":"string"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}];
var bytecode = '';
// '0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611286806100606000396000f3fe608060405260043610610051576000357c010000000000000000000000000000000000000000000000000000000090048063a8e63de714610056578063bac407ff1461007f578063f947387c146100bc575b600080fd5b34801561006257600080fd5b5061007d60048036036100789190810190610e7f565b6100f9565b005b34801561008b57600080fd5b506100a660048036036100a19190810190610f6e565b610359565b6040516100b39190611122565b60405180910390f35b3480156100c857600080fd5b506100e360048036036100de9190810190610e13565b61090f565b6040516100f09190611144565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561015457600080fd5b61015c610c40565b606060405190810160405280858152602001848152602001838152509050806001876040518082805190602001908083835b6020831015156101b3578051825260208201915060208101905060208303925061018e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020866040518082805190602001908083835b60208310151561021c57805182526020820191506020810190506020830392506101f7565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600082015181600001908051906020019061026b929190610c62565b506020820151816001019080519060200190610288929190610c62565b5060408201518160020190805190602001906102a5929190610c62565b509050506002866040518082805190602001908083835b6020831015156102e157805182526020820191506020810190506020830392506102bc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902085908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061034f929190610ce2565b5050505050505050565b60603373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156103b657600080fd5b60008214806104325750816002846040518082805190602001908083835b6020831015156103f957805182526020820191506020810190506020830392506103d4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902080549050105b156104a9576002836040518082805190602001908083835b60208310151561046f578051825260208201915060208101905060208303925061044a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054905091505b6060826040519080825280602002602001820160405280156104e557816020015b6104d2610d62565b8152602001906001900390816104ca5790505b50905060008090505b838110156109045760606002866040518082805190602001908083835b602083101515610530578051825260208201915060208101905060208303925061050b565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208281548110151561057057fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561060e5780601f106105e35761010080835404028352916020019161060e565b820191906000526020600020905b8154815290600101906020018083116105f157829003601f168201915b505050505090506001866040518082805190602001908083835b60208310151561064d5780518252602082019150602081019050602083039250610628565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020816040518082805190602001908083835b6020831015156106b65780518252602082019150602081019050602083039250610691565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060606040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561078e5780601f106107635761010080835404028352916020019161078e565b820191906000526020600020905b81548152906001019060200180831161077157829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108d25780601f106108a7576101008083540402835291602001916108d2565b820191906000526020600020905b8154815290600101906020018083116108b557829003601f168201915b50505050508152505083838151811015156108e957fe5b906020019060200201819052505080806001019150506104ee565b508091505092915050565b610917610c40565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561097257600080fd5b6001836040518082805190602001908083835b6020831015156109aa5780518252602082019150602081019050602083039250610985565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020826040518082805190602001908083835b602083101515610a1357805182526020820191506020810190506020830392506109ee565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060606040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610aeb5780601f10610ac057610100808354040283529160200191610aeb565b820191906000526020600020905b815481529060010190602001808311610ace57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c2f5780601f10610c0457610100808354040283529160200191610c2f565b820191906000526020600020905b815481529060010190602001808311610c1257829003601f168201915b505050505081525050905092915050565b6060604051908101604052806060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ca357805160ff1916838001178555610cd1565b82800160010185558215610cd1579182015b82811115610cd0578251825591602001919060010190610cb5565b5b509050610cde9190610d84565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d2357805160ff1916838001178555610d51565b82800160010185558215610d51579182015b82811115610d50578251825591602001919060010190610d35565b5b509050610d5e9190610d84565b5090565b6060604051908101604052806060815260200160608152602001606081525090565b610da691905b80821115610da2576000816000905550600101610d8a565b5090565b90565b600082601f8301121515610dbc57600080fd5b8135610dcf610dca82611193565b611166565b91508082526020830160208301858383011115610deb57600080fd5b610df68382846111f9565b50505092915050565b6000610e0b82356111ef565b905092915050565b60008060408385031215610e2657600080fd5b600083013567ffffffffffffffff811115610e4057600080fd5b610e4c85828601610da9565b925050602083013567ffffffffffffffff811115610e6957600080fd5b610e7585828601610da9565b9150509250929050565b600080600080600060a08688031215610e9757600080fd5b600086013567ffffffffffffffff811115610eb157600080fd5b610ebd88828901610da9565b955050602086013567ffffffffffffffff811115610eda57600080fd5b610ee688828901610da9565b945050604086013567ffffffffffffffff811115610f0357600080fd5b610f0f88828901610da9565b935050606086013567ffffffffffffffff811115610f2c57600080fd5b610f3888828901610da9565b925050608086013567ffffffffffffffff811115610f5557600080fd5b610f6188828901610da9565b9150509295509295909350565b60008060408385031215610f8157600080fd5b600083013567ffffffffffffffff811115610f9b57600080fd5b610fa785828601610da9565b9250506020610fb885828601610dff565b9150509250929050565b6000610fcd826111cc565b80845260208401935083602082028501610fe6856111bf565b60005b8481101561101f5783830388526110018383516110c4565b925061100c826111e2565b9150602088019750600181019050610fe9565b508196508694505050505092915050565b600061103b826111d7565b80845261104f816020860160208601611208565b6110588161123b565b602085010191505092915050565b600060608301600083015184820360008601526110838282611030565b9150506020830151848203602086015261109d8282611030565b915050604083015184820360408601526110b78282611030565b9150508091505092915050565b600060608301600083015184820360008601526110e18282611030565b915050602083015184820360208601526110fb8282611030565b915050604083015184820360408601526111158282611030565b9150508091505092915050565b6000602082019050818103600083015261113c8184610fc2565b905092915050565b6000602082019050818103600083015261115e8184611066565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561118957600080fd5b8060405250919050565b600067ffffffffffffffff8211156111aa57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561122657808201518184015260208101905061120b565b83811115611235576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820b98e3e8e05768ab227c0a99ecf270296f62bba8ec36f30a778dbe1cc4299f8d36c6578706572696d656e74616cf50037';
var bn = new web3.eth.Contract(jsonInterface);
//测试
function test(body) {
	var username = body.userName;
	console.log(username);
	console.log(checkUtils.getNowFormatDate());
	return 'result';
}
//创建账户
async function newAccount(password) {
	var account = "account";
	console.log(password);
	await web3.eth.personal.newAccount(password, function (error, data) {
		console.log("创建的新账户地址：" + data)
		account = data;
	});
	await sendToAccount(account, '10');
	return account;
}

//转账给用户
async function sendToAccount(account, amount) {
	var result = await unlockAccount(adminAccount,adminPassword);
	if(!result){return {'result':'账户解锁失败'}}
	web3.eth.sendTransaction({
		from: adminAccount,
		to: account,
		value: web3.utils.toWei(amount)
	}, function (error, data) {
		console.log("交易的hash值：" + data);
	});
}

//解锁账户
async function unlockAccount(account, password) {
	var result = false;
	await web3.eth.personal.unlockAccount(account, password, 300, function (error, data) {
		console.log(account + "解锁结果：" + data);
		result = data;
	});
	return result;
}
//部署合约方法的转发，因为没有返回值，server.js中会报错
async function deploy(body) {
	var account = body.account;
	var password = body.password;
	var result = await unlockAccount(account,password);
	
	if (result) {//解锁当前用户的以太坊账户
		var address = await deployContract(account);
	}
	return {'contractAddress':address};
}
//部署合约  
function deployContract(account) {
	//部署合约
	return new Promise(function(resolve, reject) {
		bn.deploy({
			data: bytecode
		}).send({
				from: account,
				gas: 3000000,
				gasPrice: '300000000000'
			}, function (error, transactionHash) {
				console.log(error);
			})
			.on('receipt', function (receipt) {
				console.log('合约部署地址：' + receipt.contractAddress) // 收据中包含了新的合约地址
				resolve(receipt.contractAddress);
			});
	});
}
//创建用户对象
function user(userName,name,password,addr,account)
{
    this.userName = userName;
    this.name = name;
    this.password = password;
    this.addr = addr;
	this.account = account;
}

function getBalance(account){
	return new Promise(function(resolve, reject) {
		web3.eth.getBalance(account,function (error, data) {
			console.log(error);
			resolve(data);
		});
	});
}

//注册账户
async function register(body){
	var userName = body.userName;
	var name = body.name;
	var password = body.password;
	var account= "account";
	var addr = "addr";
	var results;
	console.log('账号密码'+userName+password);
	if((!checkUtils.isEmpty(userName))&&(!checkUtils.isEmpty(password))){
		account = await newAccount(password);
		console.log('新账号' + account);
		// addr = await deploy(account,password);
		// console.log(addr);
		var pic = await getBalance(account);
		console.log("type："+typeof pic);
		var flag = true;
		while(flag){
			if(pic=='0'){
				pic = await getBalance(account);
			}else{
				flag = false;
			}
		}
		console.log("余额为："+pic);
		var unlockResult = await unlockAccount(account,password);
			if (unlockResult) {//解锁当前用户的以太坊账户
				addr = await deployContract(account);
			}else{
				results = {result:false};
				return results;
			}
		var result = await mysql1.addUser(userName,name,password,addr,account);
		if(result){
			console.log('注册成功');
			await sendToAccount(account, '10');
			results = {account:account,password:password,result:true};
		}else{
			results = {result:false};
		}
	}else{
		console.log('账号密码输入错误');
		results = {result:false};
	}
	return results;
}
//从数据库获得用户信息
async function getusers(userName){
	var result = await mysql1.selectUser1(userName);
	return result;
}
//登陆
async function login(body){
	var userName = body.userName;
	var password = body.password;
	if(body.userName.value!=""&&body.password.value!=""){
		var result;
		try {
			result = await mysql1.selectUser1(userName);
		  } catch(err) {
			console.log("账号不存在");
			return {result:false};
		  }
		if(typeof result[0] == "undefined"){
			console.log("账号不存在");
			return {result:false};
		}
		if(password==result[0].password){
			var result1 = {userName:result[0].userName,name:result[0].name,result:true}
			console.log(result1);
			return result1;
		}else{
			console.log('密码错误');
			return {result:false};
		}
	}else{
		console.log('账号或密码为空');
		return {result:false};
	}
}

//获得笔记列表
async function getNoteList(body){
	var date = body.date;
	var count = body.count;
	var account = body.account;
	var password = body.password;
	console.log("获取参数date:"+date);
	var contractAddress = body.contractAddress;
	bn.options.address = contractAddress;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	await bn.methods.getNoteList(date,count)
					.call(
					{
						from:account
					}
					, function(error,data){
						//data:调用方法之后的返回值
						console.log("getNoteList method result:"+error);
						console.log("getNoteListData method result:"+data);
						if (error) {
							result = {'result':'获取笔记列表失败'};
						}else{
							result = {'result':data};
						}
					});
	return result;
}
// async function get
//从合约获得笔记总数
async function getotalnum(){
	var result;
	await bn.methods.getLength().call(
		{
			from:account
		}
		, function(error,data){
		//data:调用方法之后的返回值
			console.log("getLength method result:"+error);
			console.log("getLength method result:"+data);
			if (error) {
				result = {'result':'获取笔记总数失败'};
			}else{
				result = {'result':data};
			}
		});
	return result;
}
//获得一个笔记outcomeCode:-1为重新登陆，0为获取失败,1为成功
async function getNote(body){
	/*获取参数begin*/
	var id = body.id;
	var userName = body.userName;
	var result = await mysql1.selectUser1(userName);
	if(typeof result[0] == "undefined"){
		return {'outcomeCode':-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var password = user1.password;
	var contractAddress = user1.addr;
	/*获取参数end*/
	var result =await unlockAccount(account,password);
	if(result){//解锁当前用户的以太坊账户
		bn.options.address = contractAddress;
		await bn.methods.getNote(id).call({
				from:account
			},function(error,data){
				if (error) {
					result = {'outcomeCode':0,"result":false};
				}else{
					result = {'outcomeCode':1,'result':data};
				}
				console.log("getNote mothod result："+error);
				console.log("getNote mothod data："+data);
			});
	}
	return result;
}

//创建用户对象
function user(userName,name,password,addr,account)
{
    this.userName = userName;
    this.name = name;
    this.password = password;
    this.addr = addr;
 this.account = account;
}
//创建文章对象
function essay(userName,title,desc,content)
{
    this.userName = userName;
    this.title = title;
    this.desc = desc;
    this.content = content;
}


//分页
async function paging(body){
	var totalnum;//总记录数
	var totalpage;//总页数
	//获取请求页数
	var page = body.page;//当前
	var userName = body.userName;
	var noteList = [];
	var outcome;
	if(checkUtils.isEmpty(page)||page==0){
		page = 1;
	}
	
	// console.log('body的'+userName);
	var result = await mysql1.selectUser1(userName);
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var data = await getotalnum(user1);
	totalnum = data.result;
	if(totalnum/3 > parseInt(totalnum/3)){
		   totalpage=parseInt(totalnum/3)+1;
	   }else{
		   totalpage=parseInt(totalnum/3);
	   }
	console.log('总页数'+totalpage);
	if(page>totalpage){
		page = totalpage;
	}
	//计算分页后的下标
	var max,min;
	if(totalnum==0){
		max = 0;
		min = 1;
	}else{
		max = totalnum-(page-1)*3-1;
		min = totalnum-(page*3);
		if(min<0){
			min = 0;
		}
	}
	//计算分页后的下标结束
	var account = user1.account;
	for(var index=max;index>=min;index--){
	 await bn.methods.getNoteByIndex(index).call({
	  from:account
	 }, function(error,data){
	 //data:调用方法之后的返回值
	  console.log("第"+index+"个笔记信息");
	  console.log("getNoteByIndex method result:"+error);
	  console.log("getNoteByIndex method result:"+data);
	  noteList.push(data);
	  if (error) {
	   console.log("返回笔记信息失败");
	  }else{
	   console.log("data");
	  }
	 });
	}
	
	outcome = {"noteList":noteList,"page":page,"totalpage":totalpage,"totalnum":totalnum}
	return outcome;
	// console.log(titless);
   }

//从合约获得笔记总数
async function getotalnum(user){
	var account = user.account;
	bn.options.address = user.addr;
	var result = await unlockAccount(account,user.password);
	if(!result){return {'result':'账户解锁失败'}}
	await bn.methods.getLength().call({
	  from:account
	 }
	 , function(error,data){
	 //data:调用方法之后的返回值
	  console.log("getLength method result:"+error);
	  console.log("getLength method result:"+data);
	  if (error) {
	   result = {'result':'获取笔记总数失败'};
	  }else{
	   result = {'result':data};
	  }
	 });
	return result;
   }


//添加笔记true为成功
async function addNote(user1,essay1){
	/*获取参数 begin*/
	var title = essay1.title;
	console.log(title);
	var desc = essay1.desc;
	var content = essay1.content;
	var account = user1.account;
	var password = user1.password;
	var contractAddress = user1.addr;
	/*获取参数end*/
	//解锁
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	var date = checkUtils.getNowFormatDate();
	console.log("nodeDate:|"+date+"|");
	var id = web3.utils.sha3(new Date().getTime()+title+desc+content)+"";
	console.log("noteId:id:"+id);
	//add合约请求
	bn.options.address = contractAddress;
	await bn.methods.addNote(date,id,title,desc,content).send({
	 from:account,
	 gas: 3000000,
	 gasPrice: '300000000000'
	},function(error,data){
	 console.log("addNote method result:"+error);
	 console.log("addNoteData method data:"+data);
	 if (!error) {
	  // result = {'result':'数据已提交'};
	  console.log('数据已提交');
	  result = true;
	  sendToAccount(account, '10');
	 }
	 else{
	  // result = {'result':'数据提交失败'};
	  console.log('数据提交失败');
	  result = false;
	 }
	});
	return result;
   }

//客户端添加笔记回应(输入标题、简介、内容，输出真假)outcomeCode:-1为重新登陆，0为获取失败,1为成功
async function addN(body){
	if((!checkUtils.isEmpty(body.title))&&(!checkUtils.isEmpty(body.desc))&&(!checkUtils.isEmpty(body.content))){
	 var result = await mysql1.selectUser1(body.userName);
	 if(typeof result[0] == "undefined"){
		return {"outcomeCode":-1,"result":false};
	 }
	 var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	 var essay1 = new essay(body.userName,body.title,body.desc,body.content);
	 var result1 = await addNote(user1,essay1);
	 if(result1){
		
		return {"outcomeCode":1,"result":true};
	 }else{
		return {"outcomeCode":0,"result":false};
	 }
	}
   }

// 增加更新模块，删除模块
//更新一个笔记
async function updatetitle(body){
	var id = body.id;
	var title = body.title;
	var desc = body.desc;
	var content = body.content;
	var date = checkUtils.getNowFormatDate();
	var result = await mysql1.selectUser1(body.userName);
	var outcomeCode = 1;
	if(typeof result[0] == "undefined"){
		return {"outcomeCode":-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var result = await unlockAccount(account,user1.password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = user1.addr;
	if((!checkUtils.isEmpty(title))&&(!checkUtils.isEmpty(desc))&&(!checkUtils.isEmpty(content))){
		var flag = await new Promise(function(resolve, reject) {
			bn.methods.updateNote(date,id,title,desc,content).send({
				from:account,
				gas: 3000000,
				gasPrice: '300000000000'
			}, function(error,data){
			//data:调用方法之后的返回值
				console.log("updateNote method result:"+error);
				console.log("updateNote method result:"+data);
				if (!error) {
					// result = {'result':'数据已提交'};
					console.log('已更新'+data);
					 sendToAccount(account, '10');
					resolve(true);
				}
				else{
					// result = {'result':'数据提交失败'};
					console.log('数据提交失败');
					resolve(false);
				}
			});
		});
		if(!flag){
			outcomeCode = 0;
		}
		return {"outcomeCode":outcomeCode,"result":flag};
	}else{
		return {"outcomeCode":0,"result":false};
	}
}

//删除一个笔记
async function deltitle(body){
	var id = body.id;
	var userName = body.userName;
	console.log("id:"+id);
	console.log("userName:"+userName);
	//获取数据库信息
	var result = await mysql1.selectUser1(userName);
	var outcomeCode = 1;
	var flag = false;
	if(typeof result[0] == "undefined"){
		return {"outcomeCode":-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var password = user1.password;
	var result = await unlockAccount(account,password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = user1.addr;
	if((!checkUtils.isEmpty(id))){
		flag = await new Promise(function(resolve, reject) {
			bn.methods.delNote(id).send({
				from:account,
				gas: 3000000,
				gasPrice: '300000000000'
			}, function(error,data){
			//data:调用方法之后的返回值
				console.log("delNote method result:"+error);
				console.log("delNote method result:"+data);
				if (!error) {
					console.log('已删除'+data);
					resolve(true);
				}
				else{
					// result = {'result':'数据提交失败'};
					console.log('数据删除失败');
					resolve(false);
				}
			});
		});
		if(!flag){
			outcomeCode = 0;
		}
		return {"outcomeCode":outcomeCode,"result":flag};
	}else{
		return {"outcomeCode":-1,"result":flag};
	}
}

async function addtype(body){
	var typelist = body.typelist;
	var flag = false;
	console.log(typelist);
	var result = await mysql1.selectUser1(body.userName);
	var outcomeCode = 1;
	if(typeof result[0] == "undefined"){
		return {"outcomeCode":-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var result = await unlockAccount(account,user1.password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = user1.addr;
	if((!checkUtils.isEmpty(typelist))){
		flag = await new Promise(function(resolve, reject) {
			bn.methods.addTypeList(typelist).send({
				from:account,
				gas: 3000000,
				gasPrice: '300000000000'
			}, function(error,data){
			//data:调用方法之后的返回值
				console.log("addTypeList method result:"+error);
				console.log("addTypeList method result:"+data);
				if (!error) {
					// result =  {'result':'数据已提交'};
					console.log('已添加话题'+data);
					resolve(true);
				}
				else{
					// result = {'result':'数据提交失败'};
					console.log('添加话题失败');
					resolve(false);
				}
			});
		});
	}
	return flag;
}


//删除感兴趣话题
async function deltype(body){
	var typelist = body.typelist;
	console.log(typelist);
	var result = await mysql1.selectUser1(body.userName);
	var outcomeCode = 1;
	var flag = false;
	if(typeof result[0] == "undefined"){
		return {"outcomeCode":-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var result = await unlockAccount(account,user1.password);
	if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = user1.addr;
	// for(var i=0;i<typelist.length;i++){
		if((!checkUtils.isEmpty(typelist))){
			flag = await new Promise(function(resolve, reject) {
			bn.methods.delTypeList(typelist).send({
				from:account,
				gas: 3000000,
				gasPrice: '300000000000'
			}, function(error,data){
			//data:调用方法之后的返回值
				console.log("delTypeList method result:"+error);
				console.log("delTypeList method result:"+data);
				if (!error) {
					// result = {'result':'数据已提交'};
					console.log('已删除话题'+data);
					resolve(true);
				}
				else{
					// result = {'result':'数据提交失败'};
					console.log('删除话题失败');
					resolve(false);
				}
			});
		});
		}
		return flag;
	// }
}
//获取话题列表
async function gettypelist(body){
	var typelist;
	var userName = body.userName;
	var result = await mysql1.selectUser1(userName);
	var outcomeCode = 1;
	var flag = false;
	if(typeof result[0] == "undefined"){
		return {"outcomeCode":-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var password = user1.password;
	// var result = await unlockAccount(account,password);
	// if(!result){return {'result':'账户解锁失败'}}
	bn.options.address = user1.addr;
	typelist = await new Promise(function(resolve, reject) {
		bn.methods.getTypeList().call({
			from:account
		}, function(error,data){
		//data:调用方法之后的返回值
			console.log("getTypeList method result:"+error);
			console.log("getTypeList method result:"+data);
			if (!error) {
				console.log("返回话题列表成功");
				console.log(data);
				resolve({"data":data,"result":true});
			}else{
				console.log("返回话题列表失败");
				resolve({"result":false});
				
			}
		});
	});
		console.log(typelist);
		if(!typelist.result){
			outcomeCode = 0;
			console.log("执行0操作？？？");
			return {"outcomeCode":outcomeCode,"result":false};
		}else{
			console.log("执行1操作？？？");
			return {"outcomeCode":1,"result":typelist.data};
		}
		
	// if((!checkUtils.isEmpty(typelist))){
	// 	return typelist;
	// }
}

async function deployPublic(body){
	return await publicNote.deploy(body.account,body.password);
}

async function pripaddtype(body){
	var account = body.account;
	var password = body.password;
	var value1 = body.count;
	/*获取参数end*/
	return await publicNote.paddtype(value1,account,password);
}

async function getTypeValues(body){
	var userName = body.userName;
	var result = await mysql1.selectUser1(userName);
	if(typeof result[0] == "undefined"){
		return {'outcomeCode':-1,"result":false};
	}
	var user1 = new user(result[0].userName,result[0].name,result[0].password,result[0].addr,result[0].account);
	var account = user1.account;
	var password = user1.password;
	return await publicNote.pgettypevalues(account,password);
}
async function addPublicNote(body){
	return await publicNote.addN(body);
}

async function Publicpaging(body){
	console.log("Publicpaging");
	
	return await publicNote.paging(body);
}
exports.test = test;
exports.newAccount = newAccount;
exports.deploy = deploy;
exports.register = register;
exports.login = login;
exports.paging = paging;
exports.addN = addN;
// exports.addNote = addNote;
exports.getNote = getNote;
exports.getNoteList = getNoteList;
exports.addN = addN;
exports.updatetitle = updatetitle;
exports.deltitle = deltitle;
exports.gettypelist = gettypelist;
exports.addtype = addtype;
exports.deltype = deltype;
exports.deployPublic = deployPublic;
exports.pripaddtype = pripaddtype;
exports.getTypeValues = getTypeValues;
exports.addPublicNote = addPublicNote;
exports.Publicpaging = Publicpaging;







